import type { Dispatch } from "react";
import React, { createContext, useContext, useReducer } from "react";
import dedent from "ts-dedent";

import { ACTION } from "../../common/constants";
import type { GithubData } from "../../common/types";
import { postMessage } from "../utils/figma";
import { getFigmaFileKeyFromUrl, getGithubDataFromUrl } from "../utils/string";

type State = {
  // Computed
  githubData: GithubData;
  figmaFileKey: string;

  // Input
  githubRepositoryUrl: string;
  githubApiKey: string;
  iconFrameId: string;
  figmaFileUrl: string;
};

type Actions =
  // GETTER
  | { type: `${typeof ACTION.GET_GITHUB_API_KEY}`; payload: string }
  | { type: `${typeof ACTION.GET_FIGMA_FILE_URL}`; payload: string }
  | { type: `${typeof ACTION.GET_GITHUB_REPO_URL}`; payload: string }
  | { type: `${typeof ACTION.GET_ICON_FRAME_ID}`; payload: string }
  // SETTER
  | { type: `${typeof ACTION.SET_GITHUB_API_KEY}`; payload: string }
  | { type: `${typeof ACTION.SET_FIGMA_FILE_URL}`; payload: string }
  | { type: `${typeof ACTION.SET_GITHUB_REPO_URL}`; payload: string }
  | { type: `${typeof ACTION.SET_ICON_FRAME_ID}`; payload: string }
  // NO SIDE EFFECT
  | { type: `${typeof ACTION.CREATE_ICON_FRAME}` }
  | { type: `${typeof ACTION.PUSH_GITHUB_REPO}` };

type SettingDispatch = Dispatch<Actions>;

const SettingStateContext = createContext<State | null>(null);
const SettingDispatchContext = createContext<SettingDispatch | null>(null);

function reducer(state: State, action: Actions): State {
  switch (action.type) {
    /* GETTER */
    case ACTION.GET_GITHUB_API_KEY:
      return {
        ...state,
        githubApiKey: action.payload,
        githubData: {
          ...state.githubData,
          apiKey: action.payload,
        },
      };
    case ACTION.GET_FIGMA_FILE_URL:
      return {
        ...state,
        figmaFileUrl: action.payload,
        figmaFileKey: getFigmaFileKeyFromUrl(action.payload),
      };
    case ACTION.GET_ICON_FRAME_ID:
      return {
        ...state,
        iconFrameId: action.payload,
      };
    case ACTION.GET_GITHUB_REPO_URL:
      return {
        ...state,
        githubRepositoryUrl: action.payload,
        githubData: {
          ...state.githubData,
          ...getGithubDataFromUrl(action.payload),
        },
      };

    /* SETTER */
    case ACTION.SET_GITHUB_API_KEY:
      postMessage({
        type: action,
        payload: action.payload,
      });
      return {
        ...state,
        githubApiKey: action.payload,
        githubData: {
          ...state.githubData,
          apiKey: action.payload,
        },
      };
    case ACTION.SET_FIGMA_FILE_URL:
      postMessage({
        type: action,
        payload: action.payload,
      });
      return {
        ...state,
        figmaFileUrl: action.payload,
        figmaFileKey: getFigmaFileKeyFromUrl(action.payload),
      };
    case ACTION.SET_ICON_FRAME_ID:
      postMessage({
        type: action,
        payload: action.payload,
      });
      return {
        ...state,
        iconFrameId: action.payload,
      };
    case ACTION.SET_GITHUB_REPO_URL:
      postMessage({
        type: action,
        payload: action.payload,
      });
      return {
        ...state,
        githubRepositoryUrl: action.payload,
        githubData: {
          ...state.githubData,
          ...getGithubDataFromUrl(action.payload),
        },
      };

    case ACTION.CREATE_ICON_FRAME:
      postMessage({
        type: ACTION.CREATE_ICON_FRAME,
      });
      return state;

    case ACTION.PUSH_GITHUB_REPO:
      postMessage({
        type: ACTION.PUSH_GITHUB_REPO,
        payload: {
          githubData: state.githubData,
          content: dedent`
          # This file is generated by icona
          # Don't edit this file directly
          icon-frame-id: ${state.iconFrameId}
          figma-file-key: ${state.figmaFileKey}\n
        `,
        },
      });
      return state;

    default:
      throw new Error("Unhandled action");
  }
}

export function SettingProvider({ children }: { children: React.ReactNode }) {
  const [state, dispatch] = useReducer(reducer, {
    // Computed
    githubData: {
      owner: "",
      name: "",
      apiKey: "",
    },
    figmaFileKey: "",

    // Input
    githubApiKey: "",
    githubRepositoryUrl: "",
    iconFrameId: "",
    figmaFileUrl: "",
  });

  // Init
  React.useEffect(() => {
    window.onmessage = (event) => {
      const msg = event.data.pluginMessage;
      switch (msg.type) {
        case ACTION.GET_GITHUB_API_KEY:
          if (msg.payload) dispatch({ type: msg.type, payload: msg.payload });
          break;
        case ACTION.GET_GITHUB_REPO_URL:
          if (msg.payload) dispatch({ type: msg.type, payload: msg.payload });
          break;
        case ACTION.GET_ICON_FRAME_ID:
          if (msg.payload) dispatch({ type: msg.type, payload: msg.payload });
          break;
        case ACTION.GET_FIGMA_FILE_URL:
          if (msg.payload) dispatch({ type: msg.type, payload: msg.payload });
          break;
      }
    };
  }, [dispatch]);

  return (
    <SettingStateContext.Provider value={state}>
      <SettingDispatchContext.Provider value={dispatch}>
        {children}
      </SettingDispatchContext.Provider>
    </SettingStateContext.Provider>
  );
}

export function useSettingState() {
  const state = useContext(SettingStateContext);
  if (!state) throw new Error("Cannot find SettingProvider");
  return state;
}

export function useSettingDispatch() {
  const dispatch = useContext(SettingDispatchContext);
  if (!dispatch) throw new Error("Cannot find SettingProvider");
  return dispatch;
}
