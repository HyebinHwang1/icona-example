/* eslint-disable no-restricted-globals */
import { Box, Button, Divider, Input, Text } from "@chakra-ui/react";
import * as React from "react";
import dedent from "ts-dedent";

import { ACTION } from "../../constants";
import { postMessage } from "../api";
import { getFileKey, parseGithubRepoUrl } from "../utils/string";
import * as styles from "./Setting.css";

const Setting = () => {
  const [githubRepositoryUrl, setGithubRepositoryUrl] = React.useState("");
  const [githubApiKey, setGithubApiKey] = React.useState("");
  const [iconFrameId, setIconFrameId] = React.useState<string>("");
  const [figmaFileUrl, setFigmaFileUrl] = React.useState<string>("");

  React.useEffect(() => {
    window.onmessage = (event) => {
      const msg = event.data.pluginMessage;
      switch (msg.type) {
        case ACTION.GET_GITHUB_API_KEY:
          if (msg.payload) setGithubApiKey(msg.payload);
          break;
        case ACTION.GET_GITHUB_REPO_URL:
          if (msg.payload) setGithubRepositoryUrl(msg.payload);
          break;
        case ACTION.GET_ICON_FRAME_ID:
          if (msg.payload) setIconFrameId(msg.payload);
          break;
        case ACTION.GET_FIGMA_FILE_URL:
          if (msg.payload) setFigmaFileUrl(msg.payload);
          break;
      }
    };
  }, []);

  React.useEffect(() => {
    if (!githubRepositoryUrl) return;
    console.log(parseGithubRepoUrl(githubRepositoryUrl));
  }, [githubRepositoryUrl]);

  const handleInput = (
    event: React.ChangeEvent<HTMLInputElement>,
    action: string,
  ) => {
    postMessage({
      type: action,
      payload: event.target.value,
    });
  };

  const createIconFrame = () => {
    postMessage({
      type: ACTION.CREATE_ICON_FRAME,
    });
  };

  const pushGithub = () => {
    const { name, owner } = parseGithubRepoUrl(githubRepositoryUrl)!;
    postMessage({
      type: ACTION.PUSH_GITHUB_REPO,
      payload: {
        apiKey: githubApiKey,
        name,
        owner,
        content: dedent`
          # This file is generated by icona
          # Don't edit this file directly
          icon-frame-id: ${iconFrameId}
          figma-file-key: ${getFileKey(figmaFileUrl)}\n
        `,
      },
    });
  };

  return (
    <Box className={styles.container}>
      <Text>Github Repository URL</Text>
      <Input
        placeholder="Github Repository URL"
        value={githubRepositoryUrl}
        onChange={(event) => {
          handleInput(event, ACTION.SET_GITHUB_REPO_URL);
          setGithubRepositoryUrl(event.target.value);
        }}
      />

      <Text>Github API Key</Text>
      <Input
        placeholder="Github API Key"
        value={githubApiKey}
        onChange={(event) => {
          handleInput(event, ACTION.SET_GITHUB_API_KEY);
          setGithubApiKey(event.target.value);
        }}
      />

      <Text>Figma Page URL</Text>
      <Input
        placeholder="Figma File URL"
        value={figmaFileUrl}
        onChange={(event) => {
          handleInput(event, ACTION.SET_FIGMA_FILE_URL);
          setFigmaFileUrl(event.target.value);
        }}
      />

      <Text>Icon Frame ID</Text>
      <Input placeholder="Icon Frame ID" value={iconFrameId} readOnly />
      {!iconFrameId && (
        <Text color="red.600" fontSize={14}>
          아이콘 프레임을 찾을 수 없습니다.
        </Text>
      )}
      <Button onClick={createIconFrame}>Icon Frame 만들기</Button>

      <Divider />
      <Box>
        <Text>{`{
          ${iconFrameId ? `"icon-frame-id": "${iconFrameId}"` : ""},
          ${
            figmaFileUrl
              ? `"figma-file-key": "${getFileKey(figmaFileUrl)}"`
              : ""
          },
        }`}</Text>
      </Box>

      <Divider />
      <Button onClick={pushGithub}>GITHUB PUSH</Button>
    </Box>
  );
};

export default Setting;
