{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {
    "BuiltInParserName": {
      "enum": [
        "angular",
        "babel",
        "babel-flow",
        "babel-ts",
        "css",
        "espree",
        "flow",
        "glimmer",
        "graphql",
        "html",
        "json",
        "json-stringify",
        "json5",
        "less",
        "lwc",
        "markdown",
        "mdx",
        "meriyah",
        "scss",
        "typescript",
        "vue",
        "yaml"
      ],
      "type": "string"
    },
    "ConfigItem": {
      "additionalProperties": false,
      "properties": {
        "dirname": {
          "description": "The path that the options are relative to.",
          "type": "string"
        },
        "file": {
          "additionalProperties": false,
          "description": "Information about the plugin's file, if Babel knows it.\n *",
          "properties": {
            "request": {
              "description": "The file that the user requested, e.g. `\"@babel/env\"`",
              "type": "string"
            },
            "resolved": {
              "description": "The full path of the resolved file, e.g. `\"/tmp/node_modules/@babel/preset-env/lib/index.js\"`",
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "description": "The name that the user gave the plugin instance, e.g. `plugins: [ ['env', {}, 'my-env'] ]`",
          "type": "string"
        },
        "options": {
          "anyOf": [
            {
              "additionalProperties": true,
              "properties": {},
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ],
          "description": "The options object passed to the plugin."
        },
        "value": {
          "anyOf": [
            {
              "additionalProperties": true,
              "properties": {},
              "type": "object"
            },
            {
              "additionalProperties": false,
              "type": "object"
            }
          ],
          "description": "The resolved value of the plugin."
        }
      },
      "type": "object"
    },
    "ConfigPlugin": {
      "anyOf": [
        {
          "$ref": "#/definitions/Plugin"
        },
        {
          "type": "string"
        }
      ]
    },
    "Config_1": {
      "additionalProperties": false,
      "properties": {
        "configFile": {
          "type": "string"
        },
        "descProp": {
          "type": "boolean"
        },
        "dimensions": {
          "type": "boolean"
        },
        "expandProps": {
          "enum": ["end", false, "start", true]
        },
        "exportType": {
          "enum": ["default", "named"],
          "type": "string"
        },
        "icon": {
          "type": ["string", "number", "boolean"]
        },
        "index": {
          "type": "boolean"
        },
        "jsx": {
          "additionalProperties": false,
          "properties": {
            "babelConfig": {
              "$ref": "#/definitions/TransformOptions"
            }
          },
          "type": "object"
        },
        "jsxRuntime": {
          "enum": ["automatic", "classic", "classic-preact"],
          "type": "string"
        },
        "jsxRuntimeImport": {
          "additionalProperties": false,
          "properties": {
            "defaultSpecifier": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "specifiers": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "memo": {
          "type": "boolean"
        },
        "namedExport": {
          "type": "string"
        },
        "native": {
          "type": "boolean"
        },
        "plugins": {
          "items": {
            "$ref": "#/definitions/ConfigPlugin"
          },
          "type": "array"
        },
        "prettier": {
          "type": "boolean"
        },
        "prettierConfig": {
          "$ref": "#/definitions/Options"
        },
        "ref": {
          "type": "boolean"
        },
        "replaceAttrValues": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "runtimeConfig": {
          "type": "boolean"
        },
        "svgProps": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "svgo": {
          "type": "boolean"
        },
        "svgoConfig": {
          "additionalProperties": false,
          "properties": {
            "datauri": {
              "$ref": "#/definitions/DataUri",
              "description": "Output as Data URI string."
            },
            "floatPrecision": {
              "description": "Precision of floating point numbers. Will be passed to each plugin that suppors this param.",
              "type": "number"
            },
            "js2svg": {
              "additionalProperties": false,
              "description": "Options for rendering optimized SVG from AST.",
              "properties": {
                "attrEnd": {
                  "type": "string"
                },
                "attrStart": {
                  "type": "string"
                },
                "cdataEnd": {
                  "type": "string"
                },
                "cdataStart": {
                  "type": "string"
                },
                "commentEnd": {
                  "type": "string"
                },
                "commentStart": {
                  "type": "string"
                },
                "doctypeEnd": {
                  "type": "string"
                },
                "doctypeStart": {
                  "type": "string"
                },
                "encodeEntity": {
                  "additionalProperties": false,
                  "type": "object"
                },
                "eol": {
                  "enum": ["crlf", "lf"],
                  "type": "string"
                },
                "finalNewline": {
                  "type": "boolean"
                },
                "indent": {
                  "type": ["string", "number"]
                },
                "pretty": {
                  "type": "boolean"
                },
                "procInstEnd": {
                  "type": "string"
                },
                "procInstStart": {
                  "type": "string"
                },
                "regEntities": {
                  "$ref": "#/definitions/RegExp"
                },
                "regValEntities": {
                  "$ref": "#/definitions/RegExp"
                },
                "tagCloseEnd": {
                  "type": "string"
                },
                "tagCloseStart": {
                  "type": "string"
                },
                "tagOpenEnd": {
                  "type": "string"
                },
                "tagOpenStart": {
                  "type": "string"
                },
                "tagShortEnd": {
                  "type": "string"
                },
                "tagShortStart": {
                  "type": "string"
                },
                "textEnd": {
                  "type": "string"
                },
                "textStart": {
                  "type": "string"
                },
                "useShortTags": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "multipass": {
              "description": "Pass over SVGs multiple times to ensure all optimizations are applied.",
              "type": "boolean"
            },
            "path": {
              "description": "Can be used by plugins, for example prefixids",
              "type": "string"
            },
            "plugins": {
              "description": "Plugins configuration\n['preset-default'] is default\nCan also specify any builtin plugin\n['sortAttrs', { name: 'prefixIds', params: { prefix: 'my-prefix' } }]\nOr custom\n[{ name: 'myPlugin', fn: () => ({}) }]",
              "items": {
                "$ref": "#/definitions/PluginConfig"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "template": {
          "$ref": "#/definitions/Template"
        },
        "titleProp": {
          "type": "boolean"
        },
        "typescript": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DataUri": {
      "enum": ["base64", "enc", "unenc"],
      "type": "string"
    },
    "Function": {
      "additionalProperties": false,
      "properties": {
        "arguments": {},
        "caller": {
          "$ref": "#/definitions/Function"
        },
        "length": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "prototype": {}
      },
      "type": "object"
    },
    "GenerateDrawableConfig": {
      "additionalProperties": false,
      "properties": {
        "active": {
          "default": false,
          "description": "generate drawable xml files",
          "type": "boolean"
        },
        "defaultColor": {
          "default": "#FF212124",
          "description": "drawable default color is #FF212124\nif you want to change default color, you can use this option",
          "type": "string"
        },
        "path": {
          "default": "xml",
          "description": "xml files path that will be generated",
          "type": "string"
        },
        "svg2vectordrawableConfig": {
          "$ref": "#/definitions/Svg2vectordrawableOptions",
          "description": "Config (svg2vectordrawable)"
        }
      },
      "type": "object"
    },
    "GeneratePDFConfig": {
      "additionalProperties": false,
      "properties": {
        "active": {
          "default": false,
          "description": "generate drawable pdf files",
          "type": "boolean"
        },
        "path": {
          "default": "pdf",
          "description": "pdf files path that will be generated",
          "type": "string"
        },
        "pdfKitConfig": {
          "$ref": "#/definitions/PDFKit.PDFDocumentOptions",
          "description": "PDFKit.PDFDocumentOptions"
        }
      },
      "type": "object"
    },
    "GenerateReactConfig": {
      "additionalProperties": false,
      "properties": {
        "active": {
          "default": false,
          "description": "generate drawable react files",
          "type": "boolean"
        },
        "path": {
          "default": "react",
          "description": "react component files path that will be generated",
          "type": "string"
        },
        "svgrConfig": {
          "$ref": "#/definitions/Config_1",
          "description": "Config (@svgr/core)"
        }
      },
      "type": "object"
    },
    "GenerateSVGConfig": {
      "additionalProperties": false,
      "properties": {
        "active": {
          "default": true,
          "description": "generate drawable svg files",
          "type": "boolean"
        },
        "path": {
          "default": "svg",
          "description": "svg files path that will be generated",
          "type": "string"
        },
        "svgoConfig": {
          "additionalProperties": false,
          "description": "Config (svgo)",
          "properties": {
            "datauri": {
              "$ref": "#/definitions/DataUri",
              "description": "Output as Data URI string."
            },
            "floatPrecision": {
              "description": "Precision of floating point numbers. Will be passed to each plugin that suppors this param.",
              "type": "number"
            },
            "js2svg": {
              "additionalProperties": false,
              "description": "Options for rendering optimized SVG from AST.",
              "properties": {
                "attrEnd": {
                  "type": "string"
                },
                "attrStart": {
                  "type": "string"
                },
                "cdataEnd": {
                  "type": "string"
                },
                "cdataStart": {
                  "type": "string"
                },
                "commentEnd": {
                  "type": "string"
                },
                "commentStart": {
                  "type": "string"
                },
                "doctypeEnd": {
                  "type": "string"
                },
                "doctypeStart": {
                  "type": "string"
                },
                "encodeEntity": {
                  "additionalProperties": false,
                  "type": "object"
                },
                "eol": {
                  "enum": ["crlf", "lf"],
                  "type": "string"
                },
                "finalNewline": {
                  "type": "boolean"
                },
                "indent": {
                  "type": ["string", "number"]
                },
                "pretty": {
                  "type": "boolean"
                },
                "procInstEnd": {
                  "type": "string"
                },
                "procInstStart": {
                  "type": "string"
                },
                "regEntities": {
                  "$ref": "#/definitions/RegExp"
                },
                "regValEntities": {
                  "$ref": "#/definitions/RegExp"
                },
                "tagCloseEnd": {
                  "type": "string"
                },
                "tagCloseStart": {
                  "type": "string"
                },
                "tagOpenEnd": {
                  "type": "string"
                },
                "tagOpenStart": {
                  "type": "string"
                },
                "tagShortEnd": {
                  "type": "string"
                },
                "tagShortStart": {
                  "type": "string"
                },
                "textEnd": {
                  "type": "string"
                },
                "textStart": {
                  "type": "string"
                },
                "useShortTags": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "multipass": {
              "description": "Pass over SVGs multiple times to ensure all optimizations are applied.",
              "type": "boolean"
            },
            "path": {
              "description": "Can be used by plugins, for example prefixids",
              "type": "string"
            },
            "plugins": {
              "description": "Plugins configuration\n['preset-default'] is default\nCan also specify any builtin plugin\n['sortAttrs', { name: 'prefixIds', params: { prefix: 'my-prefix' } }]\nOr custom\n[{ name: 'myPlugin', fn: () => ({}) }]",
              "items": {
                "$ref": "#/definitions/PluginConfig"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "GeneratorOptions": {
      "additionalProperties": false,
      "properties": {
        "auxiliaryCommentAfter": {
          "description": "Optional string to add as a block comment at the end of the output file.",
          "type": "string"
        },
        "auxiliaryCommentBefore": {
          "description": "Optional string to add as a block comment at the start of the output file.",
          "type": "string"
        },
        "comments": {
          "description": "Should comments be included in output? Defaults to `true`.",
          "type": "boolean"
        },
        "compact": {
          "description": "Set to true to aFunction adding whitespace for formatting. Defaults to the value of `opts.minified`.",
          "enum": ["auto", false, true]
        },
        "concise": {
          "description": "Set to true to reduce whitespace (but not as much as opts.compact). Defaults to `false`.",
          "type": "boolean"
        },
        "decoratorsBeforeExport": {
          "description": "Set to true to enable support for experimental decorators syntax before module exports.\nDefaults to `false`.",
          "type": "boolean"
        },
        "filename": {
          "description": "Used in warning messages",
          "type": "string"
        },
        "jsescOption": {
          "additionalProperties": false,
          "description": "Options for outputting jsesc representation.",
          "properties": {
            "compact": {
              "description": "The compact option takes a boolean value (true or false), and defaults to true (enabled). When enabled,\nthe output for arrays and objects is as compact as possible; it’s not formatted nicely.",
              "type": "boolean"
            },
            "es6": {
              "description": "The es6 option takes a boolean value (true or false), and defaults to false (disabled). When enabled, any\nastral Unicode symbols in the input are escaped using ECMAScript 6 Unicode code point escape sequences\ninstead of using separate escape sequences for each surrogate half. If backwards compatibility with ES5\nenvironments is a concern, don’t enable this setting. If the json setting is enabled, the value for the es6\nsetting is ignored (as if it was false).",
              "type": "boolean"
            },
            "escapeEverything": {
              "description": "The escapeEverything option takes a boolean value (true or false), and defaults to false (disabled). When\nenabled, all the symbols in the output are escaped — even printable ASCII symbols.",
              "type": "boolean"
            },
            "indent": {
              "description": "The indent option takes a string value, and defaults to '\\t'. When the compact setting is enabled (true),\nthe value of the indent option is used to format the output for arrays and objects.",
              "type": "string"
            },
            "indentLevel": {
              "description": "The indentLevel option takes a numeric value, and defaults to 0. It represents the current indentation level,\ni.e. the number of times the value of the indent option is repeated.",
              "type": "number"
            },
            "isScriptContext": {
              "description": "The isScriptContext option takes a boolean value (true or false), and defaults to false (disabled). When\nenabled, occurrences of </script and </style in the output are escaped as <\\/script and <\\/style, and <!--\nis escaped as \\x3C!-- (or \\u003C!-- when the json option is enabled). This setting is useful when jsesc’s\noutput ends up as part of a <script> or <style> element in an HTML document.",
              "type": "boolean"
            },
            "json": {
              "description": "The json option takes a boolean value (true or false), and defaults to false (disabled). When enabled, the\noutput is valid JSON. Hexadecimal character escape sequences and the \\v or \\0 escape sequences are not used.\nSetting json: true implies quotes: 'double', wrap: true, es6: false, although these values can still be\noverridden if needed — but in such cases, the output won’t be valid JSON anymore.",
              "type": "boolean"
            },
            "lowercaseHex": {
              "description": "The lowercaseHex option takes a boolean value (true or false), and defaults to false (disabled). When enabled,\nany alphabetical hexadecimal digits in escape sequences as well as any hexadecimal integer literals (see the\nnumbers option) in the output are in lowercase.",
              "type": "boolean"
            },
            "minimal": {
              "description": "The minimal option takes a boolean value (true or false), and defaults to false (disabled). When enabled,\nonly a limited set of symbols in the output are escaped: \\0, \\b, \\t, \\n, \\f, \\r, \\\\, \\u2028, \\u2029.",
              "type": "boolean"
            },
            "numbers": {
              "description": "The default value for the numbers option is 'decimal'. This means that any numeric values are represented\nusing decimal integer literals. Other valid options are binary, octal, and hexadecimal, which result in\nbinary integer literals, octal integer literals, and hexadecimal integer literals, respectively.",
              "enum": ["binary", "decimal", "hexadecimal", "octal"],
              "type": "string"
            },
            "quotes": {
              "description": "The default value for the quotes option is 'single'. This means that any occurrences of ' in the input\nstring are escaped as \\', so that the output can be used in a string literal wrapped in single quotes.",
              "enum": ["backtick", "double", "single"],
              "type": "string"
            },
            "wrap": {
              "description": "The wrap option takes a boolean value (true or false), and defaults to false (disabled). When enabled, the\noutput is a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through\nthe quotes setting.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jsonCompatibleStrings": {
          "description": "Set to true to run jsesc with \"json\": true to print \"\\u00A9\" vs. \"©\";",
          "type": "boolean"
        },
        "minified": {
          "description": "Should the output be minified. Defaults to `false`.",
          "type": "boolean"
        },
        "retainFunctionParens": {
          "description": "Retain parens around function expressions (could be used to change engine parsing behavior)\nDefaults to `false`.",
          "type": "boolean"
        },
        "retainLines": {
          "description": "Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces).\nDefaults to `false`.",
          "type": "boolean"
        },
        "sourceFileName": {
          "description": "The filename for the source code (i.e. the code in the `code` argument).\nThis will only be used if `code` is a string.",
          "type": "string"
        },
        "sourceMaps": {
          "description": "Enable generating source maps. Defaults to `false`.",
          "type": "boolean"
        },
        "sourceRoot": {
          "description": "A root for all relative URLs in the source map.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InputSourceMap": {
      "additionalProperties": false,
      "description": "Source map standard format as to revision 3",
      "properties": {
        "file": {
          "type": "string"
        },
        "mappings": {
          "type": "string"
        },
        "names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sourceRoot": {
          "type": "string"
        },
        "sources": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sourcesContent": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "MatchPattern": {
      "anyOf": [
        {
          "$ref": "#/definitions/RegExp"
        },
        {
          "additionalProperties": false,
          "type": "object"
        },
        {
          "type": "string"
        }
      ]
    },
    "Options": {
      "additionalProperties": false,
      "properties": {
        "__embeddedInHtml": {
          "type": "boolean"
        },
        "arrowParens": {
          "default": "'always'",
          "description": "Include parentheses around a sole arrow function parameter.",
          "enum": ["always", "avoid"],
          "type": "string"
        },
        "bracketSameLine": {
          "default": false,
          "description": "Put the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being\nalone on the next line (does not apply to self closing elements).",
          "type": "boolean"
        },
        "bracketSpacing": {
          "default": true,
          "description": "Print spaces between brackets in object literals.",
          "type": "boolean"
        },
        "embeddedLanguageFormatting": {
          "default": "'auto'",
          "description": "Control whether Prettier formats quoted code embedded in the file.",
          "enum": ["auto", "off"],
          "type": "string"
        },
        "endOfLine": {
          "default": "'lf'",
          "description": "Which end of line characters to apply.",
          "enum": ["auto", "cr", "crlf", "lf"],
          "type": "string"
        },
        "filepath": {
          "description": "Specify the input filepath. This will be used to do parser inference.",
          "type": "string"
        },
        "htmlWhitespaceSensitivity": {
          "default": "'css'",
          "description": "How to handle whitespaces in HTML.",
          "enum": ["css", "ignore", "strict"],
          "type": "string"
        },
        "insertPragma": {
          "default": false,
          "description": "Prettier can insert a special @format marker at the top of files specifying that\nthe file has been formatted with prettier. This works well when used in tandem with\nthe --require-pragma option. If there is already a docblock at the top of\nthe file then this option will add a newline to it with the @format marker.",
          "type": "boolean"
        },
        "jsxBracketSameLine": {
          "default": false,
          "description": "Put the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.",
          "type": "boolean"
        },
        "jsxSingleQuote": {
          "default": false,
          "description": "Use single quotes in JSX.",
          "type": "boolean"
        },
        "parentParser": {
          "type": "string"
        },
        "parser": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {},
              "type": "object"
            },
            {
              "additionalProperties": false,
              "type": "object"
            },
            {
              "enum": [
                "angular",
                "babel",
                "babel-flow",
                "babel-ts",
                "css",
                "espree",
                "flow",
                "glimmer",
                "graphql",
                "html",
                "json",
                "json-stringify",
                "json5",
                "less",
                "lwc",
                "markdown",
                "mdx",
                "meriyah",
                "scss",
                "typescript",
                "vue",
                "yaml"
              ],
              "type": "string"
            }
          ],
          "description": "Specify which parser to use."
        },
        "pluginSearchDirs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ],
          "description": "Specify plugin directory paths to search for plugins if not installed in the same `node_modules` where prettier is located."
        },
        "plugins": {
          "description": "Provide ability to support new languages to prettier.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin<any>"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": "array"
        },
        "printWidth": {
          "default": 80,
          "description": "Specify the line length that the printer will wrap on.",
          "type": "number"
        },
        "proseWrap": {
          "default": "'preserve'",
          "description": "By default, Prettier will wrap markdown text as-is since some services use a linebreak-sensitive renderer.\nIn some cases you may want to rely on editor/viewer soft wrapping instead, so this option allows you to opt out.",
          "enum": ["always", "never", "preserve"],
          "type": "string"
        },
        "quoteProps": {
          "default": "'as-needed'",
          "description": "Change when properties in objects are quoted.",
          "enum": ["as-needed", "consistent", "preserve"],
          "type": "string"
        },
        "rangeEnd": {
          "default": "Infinity",
          "description": "Format only a segment of a file.",
          "type": "number"
        },
        "rangeStart": {
          "default": 0,
          "description": "Format only a segment of a file.",
          "type": "number"
        },
        "requirePragma": {
          "default": false,
          "description": "Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file.\nThis is very useful when gradually transitioning large, unformatted codebases to prettier.",
          "type": "boolean"
        },
        "semi": {
          "default": true,
          "description": "Print semicolons at the ends of statements.",
          "type": "boolean"
        },
        "singleAttributePerLine": {
          "default": false,
          "description": "Enforce single attribute per line in HTML, Vue and JSX.",
          "type": "boolean"
        },
        "singleQuote": {
          "default": false,
          "description": "Use single quotes instead of double quotes.",
          "type": "boolean"
        },
        "tabWidth": {
          "default": 2,
          "description": "Specify the number of spaces per indentation-level.",
          "type": "number"
        },
        "trailingComma": {
          "default": "'es5'",
          "description": "Print trailing commas wherever possible.",
          "enum": ["all", "es5", "none"],
          "type": "string"
        },
        "useTabs": {
          "default": false,
          "description": "Indent lines with tabs instead of spaces",
          "type": "boolean"
        },
        "vueIndentScriptAndStyle": {
          "default": false,
          "description": "Whether or not to indent the code inside <script> and <style> tags in Vue files.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PDFKit.DocumentInfo": {
      "additionalProperties": false,
      "properties": {
        "Author": {
          "type": "string"
        },
        "CreationDate": {
          "format": "date-time",
          "type": "string"
        },
        "Creator": {
          "type": "string"
        },
        "Keywords": {
          "type": "string"
        },
        "ModDate": {
          "format": "date-time",
          "type": "string"
        },
        "Producer": {
          "type": "string"
        },
        "Subject": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PDFKit.DocumentPermissions": {
      "additionalProperties": false,
      "properties": {
        "annotating": {
          "type": "boolean"
        },
        "contentAccessibility": {
          "type": "boolean"
        },
        "copying": {
          "type": "boolean"
        },
        "documentAssembly": {
          "type": "boolean"
        },
        "fillingForms": {
          "type": "boolean"
        },
        "modifying": {
          "type": "boolean"
        },
        "printing": {
          "enum": ["highResolution", "lowResolution"],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PDFKit.PDFDocumentOptions": {
      "additionalProperties": false,
      "properties": {
        "autoFirstPage": {
          "type": "boolean"
        },
        "bufferPages": {
          "type": "boolean"
        },
        "compress": {
          "type": "boolean"
        },
        "displayTitle": {
          "type": "boolean"
        },
        "font": {
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/PDFKit.DocumentInfo"
        },
        "lang": {
          "type": "string"
        },
        "layout": {
          "enum": ["landscape", "portrait"],
          "type": "string"
        },
        "margin": {
          "type": "number"
        },
        "margins": {
          "additionalProperties": false,
          "properties": {
            "bottom": {
              "type": "number"
            },
            "left": {
              "type": "number"
            },
            "right": {
              "type": "number"
            },
            "top": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "ownerPassword": {
          "type": "string"
        },
        "pdfVersion": {
          "enum": ["1.3", "1.4", "1.5", "1.6", "1.7", "1.7ext3"],
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/PDFKit.DocumentPermissions"
        },
        "size": {
          "anyOf": [
            {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ]
        },
        "tagged": {
          "type": "boolean"
        },
        "userPassword": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Parser<T>": {
      "additionalProperties": false,
      "properties": {
        "astFormat": {
          "type": "string"
        },
        "hasPragma": {
          "additionalProperties": false,
          "type": "object"
        },
        "locEnd": {
          "additionalProperties": false,
          "type": "object"
        },
        "locStart": {
          "additionalProperties": false,
          "type": "object"
        },
        "parse": {
          "additionalProperties": false,
          "type": "object"
        },
        "preprocess": {
          "additionalProperties": false,
          "type": "object"
        }
      },
      "type": "object"
    },
    "ParserOptions": {
      "additionalProperties": false,
      "properties": {
        "allowAwaitOutsideFunction": {
          "description": "By default, await use is not allowed outside of an async function.\nSet this to true to accept such code.",
          "type": "boolean"
        },
        "allowImportExportEverywhere": {
          "description": "By default, import and declarations can only appear at a program's top level.\nSetting this option to true allows them anywhere where a statement is allowed.",
          "type": "boolean"
        },
        "allowNewTargetOutsideFunction": {
          "description": "By default, new.target use is not allowed outside of a function or class.\nSet this to true to accept such code.",
          "type": "boolean"
        },
        "allowReturnOutsideFunction": {
          "description": "By default, a return statement at the top level raises an error.\nSet this to true to accept such code.",
          "type": "boolean"
        },
        "allowSuperOutsideMethod": {
          "type": "boolean"
        },
        "allowUndeclaredExports": {
          "description": "By default, exported identifiers must refer to a declared variable.\nSet this to true to allow statements to reference undeclared variables.",
          "type": "boolean"
        },
        "annexB": {
          "description": "By default, Babel parser JavaScript code according to Annex B syntax.\nSet this to `false` to disable such behavior.",
          "type": "boolean"
        },
        "attachComment": {
          "description": "By default, Babel attaches comments to adjacent AST nodes.\nWhen this option is set to false, comments are not attached.\nIt can provide up to 30% performance improvement when the input code has many comments.",
          "type": "boolean"
        },
        "createParenthesizedExpressions": {
          "description": "By default, the parser adds information about parentheses by setting\n`extra.parenthesized` to `true` as needed.\nWhen this option is `true` the parser creates `ParenthesizedExpression`\nAST nodes instead of using the `extra` property.",
          "type": "boolean"
        },
        "errorRecovery": {
          "description": "By default, Babel always throws an error when it finds some invalid code.\nWhen this option is set to true, it will store the parsing error and\ntry to continue parsing the invalid input file.",
          "type": "boolean"
        },
        "plugins": {
          "description": "Array containing the plugins that you want to enable.",
          "items": {},
          "type": "array"
        },
        "ranges": {
          "description": "Adds a ranges property to each node: [node.start, node.end]",
          "type": "boolean"
        },
        "sourceFilename": {
          "description": "Correlate output AST nodes with their source filename.\nUseful when generating code and source maps from the ASTs of multiple input files.",
          "type": "string"
        },
        "sourceType": {
          "description": "Indicate the mode the code should be parsed in.\nCan be one of \"script\", \"module\", or \"unambiguous\". Defaults to \"script\".\n\"unambiguous\" will make @babel/parser attempt to guess, based on the presence\nof ES6 import or statements.\nFiles with ES6 imports and exports are considered \"module\" and are otherwise \"script\".",
          "enum": ["module", "script", "unambiguous"],
          "type": "string"
        },
        "startColumn": {
          "description": "By default, the parsed code is treated as if it starts from line 1, column 0.\nYou can provide a column number to alternatively start with.\nUseful for integration with other source tools.",
          "type": "number"
        },
        "startLine": {
          "description": "By default, the first line of code parsed is treated as line 1.\nYou can provide a line number to alternatively start with.\nUseful for integration with other source tools.",
          "type": "number"
        },
        "strictMode": {
          "description": "Should the parser work in strict mode.\nDefaults to true if sourceType === 'module'. Otherwise, false.",
          "type": "boolean"
        },
        "tokens": {
          "description": "Adds all parsed tokens to a tokens property on the File node.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Partial<RequiredOptions>": {
      "additionalProperties": false,
      "properties": {
        "__embeddedInHtml": {
          "type": "boolean"
        },
        "arrowParens": {
          "default": "'always'",
          "description": "Include parentheses around a sole arrow function parameter.",
          "enum": ["always", "avoid"],
          "type": "string"
        },
        "bracketSameLine": {
          "default": false,
          "description": "Put the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being\nalone on the next line (does not apply to self closing elements).",
          "type": "boolean"
        },
        "bracketSpacing": {
          "default": true,
          "description": "Print spaces between brackets in object literals.",
          "type": "boolean"
        },
        "embeddedLanguageFormatting": {
          "default": "'auto'",
          "description": "Control whether Prettier formats quoted code embedded in the file.",
          "enum": ["auto", "off"],
          "type": "string"
        },
        "endOfLine": {
          "default": "'lf'",
          "description": "Which end of line characters to apply.",
          "enum": ["auto", "cr", "crlf", "lf"],
          "type": "string"
        },
        "filepath": {
          "description": "Specify the input filepath. This will be used to do parser inference.",
          "type": "string"
        },
        "htmlWhitespaceSensitivity": {
          "default": "'css'",
          "description": "How to handle whitespaces in HTML.",
          "enum": ["css", "ignore", "strict"],
          "type": "string"
        },
        "insertPragma": {
          "default": false,
          "description": "Prettier can insert a special @format marker at the top of files specifying that\nthe file has been formatted with prettier. This works well when used in tandem with\nthe --require-pragma option. If there is already a docblock at the top of\nthe file then this option will add a newline to it with the @format marker.",
          "type": "boolean"
        },
        "jsxBracketSameLine": {
          "default": false,
          "description": "Put the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.",
          "type": "boolean"
        },
        "jsxSingleQuote": {
          "default": false,
          "description": "Use single quotes in JSX.",
          "type": "boolean"
        },
        "parentParser": {
          "type": "string"
        },
        "parser": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {},
              "type": "object"
            },
            {
              "additionalProperties": false,
              "type": "object"
            },
            {
              "enum": [
                "angular",
                "babel",
                "babel-flow",
                "babel-ts",
                "css",
                "espree",
                "flow",
                "glimmer",
                "graphql",
                "html",
                "json",
                "json-stringify",
                "json5",
                "less",
                "lwc",
                "markdown",
                "mdx",
                "meriyah",
                "scss",
                "typescript",
                "vue",
                "yaml"
              ],
              "type": "string"
            }
          ],
          "description": "Specify which parser to use."
        },
        "pluginSearchDirs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ],
          "description": "Specify plugin directory paths to search for plugins if not installed in the same `node_modules` where prettier is located."
        },
        "plugins": {
          "description": "Provide ability to support new languages to prettier.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin<any>"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": "array"
        },
        "printWidth": {
          "default": 80,
          "description": "Specify the line length that the printer will wrap on.",
          "type": "number"
        },
        "proseWrap": {
          "default": "'preserve'",
          "description": "By default, Prettier will wrap markdown text as-is since some services use a linebreak-sensitive renderer.\nIn some cases you may want to rely on editor/viewer soft wrapping instead, so this option allows you to opt out.",
          "enum": ["always", "never", "preserve"],
          "type": "string"
        },
        "quoteProps": {
          "default": "'as-needed'",
          "description": "Change when properties in objects are quoted.",
          "enum": ["as-needed", "consistent", "preserve"],
          "type": "string"
        },
        "rangeEnd": {
          "default": "Infinity",
          "description": "Format only a segment of a file.",
          "type": "number"
        },
        "rangeStart": {
          "default": 0,
          "description": "Format only a segment of a file.",
          "type": "number"
        },
        "requirePragma": {
          "default": false,
          "description": "Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file.\nThis is very useful when gradually transitioning large, unformatted codebases to prettier.",
          "type": "boolean"
        },
        "semi": {
          "default": true,
          "description": "Print semicolons at the ends of statements.",
          "type": "boolean"
        },
        "singleAttributePerLine": {
          "default": false,
          "description": "Enforce single attribute per line in HTML, Vue and JSX.",
          "type": "boolean"
        },
        "singleQuote": {
          "default": false,
          "description": "Use single quotes instead of double quotes.",
          "type": "boolean"
        },
        "tabWidth": {
          "default": 2,
          "description": "Specify the number of spaces per indentation-level.",
          "type": "number"
        },
        "trailingComma": {
          "default": "'es5'",
          "description": "Print trailing commas wherever possible.",
          "enum": ["all", "es5", "none"],
          "type": "string"
        },
        "useTabs": {
          "default": false,
          "description": "Indent lines with tabs instead of spaces",
          "type": "boolean"
        },
        "vueIndentScriptAndStyle": {
          "default": false,
          "description": "Whether or not to indent the code inside <script> and <style> tags in Vue files.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Plugin": {
      "additionalProperties": false,
      "type": "object"
    },
    "Plugin<any>": {
      "additionalProperties": false,
      "properties": {
        "defaultOptions": {
          "$ref": "#/definitions/Partial<RequiredOptions>"
        },
        "languages": {
          "items": {
            "$ref": "#/definitions/SupportLanguage"
          },
          "type": "array"
        },
        "options": {
          "$ref": "#/definitions/SupportOptions"
        },
        "parsers": {
          "additionalProperties": {
            "$ref": "#/definitions/Parser<T>"
          },
          "type": "object"
        },
        "printers": {
          "additionalProperties": {
            "$ref": "#/definitions/Printer<T>"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "PluginConfig": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "fn": {
              "additionalProperties": false,
              "type": "object"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "cleanupAttrs",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "newlines": {
                  "type": "boolean"
                },
                "spaces": {
                  "type": "boolean"
                },
                "trim": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "cleanupEnableBackground",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "cleanupIds",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "force": {
                  "type": "boolean"
                },
                "minify": {
                  "type": "boolean"
                },
                "preserve": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "preservePrefixes": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "remove": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "cleanupNumericValues",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "convertToPx": {
                  "type": "boolean"
                },
                "defaultPx": {
                  "type": "boolean"
                },
                "floatPrecision": {
                  "type": "number"
                },
                "leadingZero": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "collapseGroups",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "convertColors",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "currentColor": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/RegExp"
                    },
                    {
                      "type": ["string", "boolean"]
                    }
                  ]
                },
                "names2hex": {
                  "type": "boolean"
                },
                "rgb2hex": {
                  "type": "boolean"
                },
                "shorthex": {
                  "type": "boolean"
                },
                "shortname": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "convertEllipseToCircle",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "convertPathData",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "applyTransforms": {
                  "type": "boolean"
                },
                "applyTransformsStroked": {
                  "type": "boolean"
                },
                "collapseRepeated": {
                  "type": "boolean"
                },
                "curveSmoothShorthands": {
                  "type": "boolean"
                },
                "floatPrecision": {
                  "anyOf": [
                    {
                      "const": false,
                      "type": "boolean"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "forceAbsolutePath": {
                  "type": "boolean"
                },
                "leadingZero": {
                  "type": "boolean"
                },
                "lineShorthands": {
                  "type": "boolean"
                },
                "makeArcs": {
                  "additionalProperties": false,
                  "properties": {
                    "threshold": {
                      "type": "number"
                    },
                    "tolerance": {
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "negativeExtraSpace": {
                  "type": "boolean"
                },
                "noSpaceAfterFlags": {
                  "type": "boolean"
                },
                "removeUseless": {
                  "type": "boolean"
                },
                "straightCurves": {
                  "type": "boolean"
                },
                "transformPrecision": {
                  "type": "number"
                },
                "utilizeAbsolute": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "convertShapeToPath",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "convertArcs": {
                  "type": "boolean"
                },
                "floatPrecision": {
                  "type": "number"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "convertTransform",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "collapseIntoOne": {
                  "type": "boolean"
                },
                "convertToShorts": {
                  "type": "boolean"
                },
                "degPrecision": {
                  "type": "number"
                },
                "floatPrecision": {
                  "type": "number"
                },
                "leadingZero": {
                  "type": "boolean"
                },
                "matrixToTransform": {
                  "type": "boolean"
                },
                "negativeExtraSpace": {
                  "type": "boolean"
                },
                "removeUseless": {
                  "type": "boolean"
                },
                "shortRotate": {
                  "type": "boolean"
                },
                "shortScale": {
                  "type": "boolean"
                },
                "shortTranslate": {
                  "type": "boolean"
                },
                "transformPrecision": {
                  "type": "number"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "mergeStyles",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "inlineStyles",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "onlyMatchedOnce": {
                  "type": "boolean"
                },
                "removeMatchedSelectors": {
                  "type": "boolean"
                },
                "useMqs": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "usePseudos": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "mergePaths",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "floatPrecision": {
                  "type": "number"
                },
                "force": {
                  "type": "boolean"
                },
                "noSpaceAfterFlags": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "minifyStyles",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "comments": {
                  "default": true,
                  "description": "Specify what comments to leave:\n- 'exclamation' or true – leave all exclamation comments\n- 'first-exclamation' – remove every comment except first one\n- false – remove all comments",
                  "type": ["string", "boolean"]
                },
                "forceMediaMerge": {
                  "default": false,
                  "description": "Enables merging of @media rules with the same media query by splitted by other rules.\nThe optimisation is unsafe in general, but should work fine in most cases. Use it on your own risk.",
                  "type": "boolean"
                },
                "restructure": {
                  "default": true,
                  "description": "Disable or enable a structure optimisations.",
                  "type": "boolean"
                },
                "usage": {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "classes": {
                          "type": "boolean"
                        },
                        "force": {
                          "type": "boolean"
                        },
                        "ids": {
                          "type": "boolean"
                        },
                        "tags": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "type": "boolean"
                    }
                  ],
                  "description": "Advanced optimizations"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "moveElemsAttrsToGroup",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "moveGroupAttrsToElems",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeComments",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeDesc",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "removeAny": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeDoctype",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeEditorsNSData",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "additionalNamespaces": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeEmptyAttrs",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeEmptyContainers",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeEmptyText",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "text": {
                  "type": "boolean"
                },
                "tref": {
                  "type": "boolean"
                },
                "tspan": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeHiddenElems",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "circleR0": {
                  "type": "boolean"
                },
                "displayNone": {
                  "type": "boolean"
                },
                "ellipseRX0": {
                  "type": "boolean"
                },
                "ellipseRY0": {
                  "type": "boolean"
                },
                "imageHeight0": {
                  "type": "boolean"
                },
                "imageWidth0": {
                  "type": "boolean"
                },
                "isHidden": {
                  "type": "boolean"
                },
                "opacity0": {
                  "type": "boolean"
                },
                "pathEmptyD": {
                  "type": "boolean"
                },
                "patternHeight0": {
                  "type": "boolean"
                },
                "patternWidth0": {
                  "type": "boolean"
                },
                "polygonEmptyPoints": {
                  "type": "boolean"
                },
                "polylineEmptyPoints": {
                  "type": "boolean"
                },
                "rectHeight0": {
                  "type": "boolean"
                },
                "rectWidth0": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeMetadata",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeNonInheritableGroupAttrs",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeTitle",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeUnknownsAndDefaults",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "defaultAttrs": {
                  "type": "boolean"
                },
                "keepAriaAttrs": {
                  "type": "boolean"
                },
                "keepDataAttrs": {
                  "type": "boolean"
                },
                "keepRoleAttr": {
                  "type": "boolean"
                },
                "unknownAttrs": {
                  "type": "boolean"
                },
                "unknownContent": {
                  "type": "boolean"
                },
                "uselessOverrides": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeUnusedNS",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeUselessDefs",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeUselessStrokeAndFill",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "fill": {
                  "type": "boolean"
                },
                "removeNone": {
                  "type": "boolean"
                },
                "stroke": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeViewBox",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeXMLProcInst",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "sortAttrs",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "order": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "xmlnsOrder": {
                  "enum": ["alphabetical", "front"],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "sortDefsChildren",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "preset-default",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "floatPrecision": {
                  "type": "number"
                },
                "overrides": {
                  "$ref": "#/definitions/PresetDefaultOverrides",
                  "description": "All default plugins can be customized or disabled here\nfor example\n{\n  sortAttrs: { xmlnsOrder: \"alphabetical\" },\n  cleanupAttrs: false,\n}"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "cleanupListOfValues",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "convertToPx": {
                  "type": "boolean"
                },
                "defaultPx": {
                  "type": "boolean"
                },
                "floatPrecision": {
                  "type": "number"
                },
                "leadingZero": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "convertStyleToAttrs",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "keepImportant": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "prefixIds",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "delim": {
                  "type": "string"
                },
                "prefix": {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "type": "object"
                    },
                    {
                      "type": ["string", "boolean"]
                    }
                  ]
                },
                "prefixClassNames": {
                  "type": "boolean"
                },
                "prefixIds": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeDimensions",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeOffCanvasPaths",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeRasterImages",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeScriptElement",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeStyleElement",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeXMLNS",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "reusePaths",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/Function"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "addAttributesToSVGElement",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "attribute": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Record<string,string>"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "attributes": {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Record<string,string>"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "addClassesToSVGElement",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "className": {
                  "type": "string"
                },
                "classNames": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeAttributesBySelector",
              "type": "string"
            },
            "params": {}
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeAttrs",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "attrs": {
                  "anyOf": [
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "elemSeparator": {
                  "type": "string"
                },
                "preserveCurrentColor": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "const": "removeElementsByAttr",
              "type": "string"
            },
            "params": {
              "additionalProperties": false,
              "properties": {
                "class": {
                  "anyOf": [
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "id": {
                  "anyOf": [
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "enum": [
            "cleanupAttrs",
            "cleanupEnableBackground",
            "cleanupIds",
            "cleanupListOfValues",
            "cleanupNumericValues",
            "collapseGroups",
            "convertColors",
            "convertEllipseToCircle",
            "convertPathData",
            "convertShapeToPath",
            "convertStyleToAttrs",
            "convertTransform",
            "inlineStyles",
            "mergePaths",
            "mergeStyles",
            "minifyStyles",
            "moveElemsAttrsToGroup",
            "moveGroupAttrsToElems",
            "prefixIds",
            "preset-default",
            "removeComments",
            "removeDesc",
            "removeDimensions",
            "removeDoctype",
            "removeEditorsNSData",
            "removeEmptyAttrs",
            "removeEmptyContainers",
            "removeEmptyText",
            "removeHiddenElems",
            "removeMetadata",
            "removeNonInheritableGroupAttrs",
            "removeOffCanvasPaths",
            "removeRasterImages",
            "removeScriptElement",
            "removeStyleElement",
            "removeTitle",
            "removeUnknownsAndDefaults",
            "removeUnusedNS",
            "removeUselessDefs",
            "removeUselessStrokeAndFill",
            "removeViewBox",
            "removeXMLNS",
            "removeXMLProcInst",
            "reusePaths",
            "sortAttrs",
            "sortDefsChildren"
          ],
          "type": "string"
        }
      ]
    },
    "PluginItem": {
      "anyOf": [
        {
          "additionalProperties": true,
          "properties": {},
          "type": "object"
        },
        {
          "$ref": "#/definitions/ConfigItem"
        },
        {
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/definitions/PluginObj<any>"
        },
        {
          "items": [
            {
              "$ref": "#/definitions/PluginTarget"
            },
            {
              "$ref": "#/definitions/PluginOptions"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        {
          "items": [
            {
              "$ref": "#/definitions/PluginTarget"
            },
            {
              "$ref": "#/definitions/PluginOptions"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 3,
          "minItems": 3,
          "type": "array"
        },
        {
          "type": "string"
        }
      ]
    },
    "PluginObj<any>": {
      "additionalProperties": false,
      "properties": {
        "inherits": {},
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PluginOptions": {
      "anyOf": [
        {
          "additionalProperties": true,
          "properties": {},
          "type": "object"
        },
        {
          "const": false,
          "type": "boolean"
        }
      ]
    },
    "PluginTarget": {
      "anyOf": [
        {
          "additionalProperties": true,
          "properties": {},
          "type": "object"
        },
        {
          "additionalProperties": false,
          "type": "object"
        },
        {
          "type": "string"
        }
      ]
    },
    "PresetDefaultOverrides": {
      "additionalProperties": false,
      "properties": {
        "cleanupAttrs": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "newlines": {
                  "type": "boolean"
                },
                "spaces": {
                  "type": "boolean"
                },
                "trim": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "cleanupEnableBackground": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "cleanupIds": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "force": {
                  "type": "boolean"
                },
                "minify": {
                  "type": "boolean"
                },
                "preserve": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "preservePrefixes": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "remove": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "cleanupNumericValues": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "convertToPx": {
                  "type": "boolean"
                },
                "defaultPx": {
                  "type": "boolean"
                },
                "floatPrecision": {
                  "type": "number"
                },
                "leadingZero": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "collapseGroups": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "convertColors": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "currentColor": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/RegExp"
                    },
                    {
                      "type": ["string", "boolean"]
                    }
                  ]
                },
                "names2hex": {
                  "type": "boolean"
                },
                "rgb2hex": {
                  "type": "boolean"
                },
                "shorthex": {
                  "type": "boolean"
                },
                "shortname": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "convertEllipseToCircle": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "convertPathData": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "applyTransforms": {
                  "type": "boolean"
                },
                "applyTransformsStroked": {
                  "type": "boolean"
                },
                "collapseRepeated": {
                  "type": "boolean"
                },
                "curveSmoothShorthands": {
                  "type": "boolean"
                },
                "floatPrecision": {
                  "anyOf": [
                    {
                      "const": false,
                      "type": "boolean"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "forceAbsolutePath": {
                  "type": "boolean"
                },
                "leadingZero": {
                  "type": "boolean"
                },
                "lineShorthands": {
                  "type": "boolean"
                },
                "makeArcs": {
                  "additionalProperties": false,
                  "properties": {
                    "threshold": {
                      "type": "number"
                    },
                    "tolerance": {
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "negativeExtraSpace": {
                  "type": "boolean"
                },
                "noSpaceAfterFlags": {
                  "type": "boolean"
                },
                "removeUseless": {
                  "type": "boolean"
                },
                "straightCurves": {
                  "type": "boolean"
                },
                "transformPrecision": {
                  "type": "number"
                },
                "utilizeAbsolute": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "convertShapeToPath": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "convertArcs": {
                  "type": "boolean"
                },
                "floatPrecision": {
                  "type": "number"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "convertTransform": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "collapseIntoOne": {
                  "type": "boolean"
                },
                "convertToShorts": {
                  "type": "boolean"
                },
                "degPrecision": {
                  "type": "number"
                },
                "floatPrecision": {
                  "type": "number"
                },
                "leadingZero": {
                  "type": "boolean"
                },
                "matrixToTransform": {
                  "type": "boolean"
                },
                "negativeExtraSpace": {
                  "type": "boolean"
                },
                "removeUseless": {
                  "type": "boolean"
                },
                "shortRotate": {
                  "type": "boolean"
                },
                "shortScale": {
                  "type": "boolean"
                },
                "shortTranslate": {
                  "type": "boolean"
                },
                "transformPrecision": {
                  "type": "number"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "inlineStyles": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "onlyMatchedOnce": {
                  "type": "boolean"
                },
                "removeMatchedSelectors": {
                  "type": "boolean"
                },
                "useMqs": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "usePseudos": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "mergePaths": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "floatPrecision": {
                  "type": "number"
                },
                "force": {
                  "type": "boolean"
                },
                "noSpaceAfterFlags": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "mergeStyles": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "minifyStyles": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "comments": {
                  "default": true,
                  "description": "Specify what comments to leave:\n- 'exclamation' or true – leave all exclamation comments\n- 'first-exclamation' – remove every comment except first one\n- false – remove all comments",
                  "type": ["string", "boolean"]
                },
                "forceMediaMerge": {
                  "default": false,
                  "description": "Enables merging of @media rules with the same media query by splitted by other rules.\nThe optimisation is unsafe in general, but should work fine in most cases. Use it on your own risk.",
                  "type": "boolean"
                },
                "restructure": {
                  "default": true,
                  "description": "Disable or enable a structure optimisations.",
                  "type": "boolean"
                },
                "usage": {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "classes": {
                          "type": "boolean"
                        },
                        "force": {
                          "type": "boolean"
                        },
                        "ids": {
                          "type": "boolean"
                        },
                        "tags": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "type": "boolean"
                    }
                  ],
                  "description": "Advanced optimizations"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "moveElemsAttrsToGroup": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "moveGroupAttrsToElems": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeComments": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeDesc": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "removeAny": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeDoctype": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeEditorsNSData": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "additionalNamespaces": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeEmptyAttrs": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeEmptyContainers": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeEmptyText": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "text": {
                  "type": "boolean"
                },
                "tref": {
                  "type": "boolean"
                },
                "tspan": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeHiddenElems": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "circleR0": {
                  "type": "boolean"
                },
                "displayNone": {
                  "type": "boolean"
                },
                "ellipseRX0": {
                  "type": "boolean"
                },
                "ellipseRY0": {
                  "type": "boolean"
                },
                "imageHeight0": {
                  "type": "boolean"
                },
                "imageWidth0": {
                  "type": "boolean"
                },
                "isHidden": {
                  "type": "boolean"
                },
                "opacity0": {
                  "type": "boolean"
                },
                "pathEmptyD": {
                  "type": "boolean"
                },
                "patternHeight0": {
                  "type": "boolean"
                },
                "patternWidth0": {
                  "type": "boolean"
                },
                "polygonEmptyPoints": {
                  "type": "boolean"
                },
                "polylineEmptyPoints": {
                  "type": "boolean"
                },
                "rectHeight0": {
                  "type": "boolean"
                },
                "rectWidth0": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeMetadata": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeNonInheritableGroupAttrs": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeTitle": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeUnknownsAndDefaults": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "defaultAttrs": {
                  "type": "boolean"
                },
                "keepAriaAttrs": {
                  "type": "boolean"
                },
                "keepDataAttrs": {
                  "type": "boolean"
                },
                "keepRoleAttr": {
                  "type": "boolean"
                },
                "unknownAttrs": {
                  "type": "boolean"
                },
                "unknownContent": {
                  "type": "boolean"
                },
                "uselessOverrides": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeUnusedNS": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeUselessDefs": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeUselessStrokeAndFill": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "fill": {
                  "type": "boolean"
                },
                "removeNone": {
                  "type": "boolean"
                },
                "stroke": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeViewBox": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "removeXMLProcInst": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "sortAttrs": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "order": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "xmlnsOrder": {
                  "enum": ["alphabetical", "front"],
                  "type": "string"
                }
              },
              "type": "object"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "sortDefsChildren": {
          "anyOf": [
            {
              "$ref": "#/definitions/Function"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        }
      },
      "type": "object"
    },
    "Printer<T>": {
      "additionalProperties": false,
      "properties": {
        "canAttachComment": {
          "additionalProperties": false,
          "type": "object"
        },
        "embed": {
          "additionalProperties": false,
          "type": "object"
        },
        "handleComments": {
          "additionalProperties": false,
          "properties": {
            "endOfLine": {
              "additionalProperties": false,
              "type": "object"
            },
            "ownLine": {
              "additionalProperties": false,
              "type": "object"
            },
            "remaining": {
              "additionalProperties": false,
              "type": "object"
            }
          },
          "type": "object"
        },
        "hasPrettierIgnore": {
          "additionalProperties": false,
          "type": "object"
        },
        "insertPragma": {
          "additionalProperties": false,
          "type": "object"
        },
        "isBlockComment": {
          "additionalProperties": false,
          "type": "object"
        },
        "massageAstNode": {
          "additionalProperties": false,
          "type": "object"
        },
        "preprocess": {
          "additionalProperties": false,
          "type": "object"
        },
        "printComment": {
          "additionalProperties": false,
          "type": "object"
        },
        "willPrintOwnComments": {
          "additionalProperties": false,
          "type": "object"
        }
      },
      "type": "object"
    },
    "Record<string,string>": {
      "additionalProperties": false,
      "type": "object"
    },
    "RegExp": {
      "additionalProperties": false,
      "properties": {
        "dotAll": {
          "type": "boolean"
        },
        "flags": {
          "type": "string"
        },
        "global": {
          "type": "boolean"
        },
        "ignoreCase": {
          "type": "boolean"
        },
        "lastIndex": {
          "type": "number"
        },
        "multiline": {
          "type": "boolean"
        },
        "source": {
          "type": "string"
        },
        "sticky": {
          "type": "boolean"
        },
        "unicode": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SupportLanguage": {
      "additionalProperties": false,
      "properties": {
        "aceMode": {
          "type": "string"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "codemirrorMimeType": {
          "type": "string"
        },
        "codemirrorMode": {
          "type": "string"
        },
        "extensions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "filenames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "group": {
          "type": "string"
        },
        "interpreters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "linguistLanguageId": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "parsers": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "items": {
                "$ref": "#/definitions/BuiltInParserName"
              },
              "type": "array"
            }
          ]
        },
        "since": {
          "type": "string"
        },
        "tmScope": {
          "type": "string"
        },
        "vscodeLanguageIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SupportOptions": {
      "additionalProperties": false,
      "type": "object"
    },
    "Svg2vectordrawableOptions": {
      "additionalProperties": false,
      "properties": {
        "fillBlack": {
          "type": "boolean"
        },
        "floatPrecision": {
          "type": "number"
        },
        "strict": {
          "type": "boolean"
        },
        "tint": {
          "type": "string"
        },
        "xmlTag": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Template": {
      "additionalProperties": false,
      "type": "object"
    },
    "TransformCaller": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "supportsDynamicImport": {
          "type": "boolean"
        },
        "supportsExportNamespaceFrom": {
          "type": "boolean"
        },
        "supportsStaticESM": {
          "type": "boolean"
        },
        "supportsTopLevelAwait": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TransformOptions": {
      "additionalProperties": false,
      "properties": {
        "assumptions": {
          "additionalProperties": {
            "type": "boolean"
          },
          "description": "Specify which assumptions it can make about your code, to better optimize the compilation result. **NOTE**: This replaces the various `loose` options in plugins in favor of\ntop-level options that can apply to multiple plugins",
          "type": "object"
        },
        "ast": {
          "description": "Include the AST in the returned object\n\nDefault: `false`",
          "type": "boolean"
        },
        "auxiliaryCommentAfter": {
          "description": "Attach a comment after all non-user injected code\n\nDefault: `null`",
          "type": "string"
        },
        "auxiliaryCommentBefore": {
          "description": "Attach a comment before all non-user injected code\n\nDefault: `null`",
          "type": "string"
        },
        "babelrc": {
          "description": "Specify whether or not to use .babelrc and\n.babelignore files.\n\nDefault: `true`",
          "type": "boolean"
        },
        "babelrcRoots": {
          "anyOf": [
            {
              "$ref": "#/definitions/RegExp"
            },
            {
              "additionalProperties": false,
              "type": "object"
            },
            {
              "items": {
                "$ref": "#/definitions/MatchPattern"
              },
              "type": "array"
            },
            {
              "type": ["string", "boolean"]
            }
          ],
          "description": "Specify which packages should be search for .babelrc files when they are being compiled. `true` to always search, or a path string or an array of paths to packages to search\ninside of. Defaults to only searching the \"root\" package.\n\nDefault: `(root)`"
        },
        "browserslistConfigFile": {
          "description": "Toggles whether or not browserslist config sources are used, which includes searching for any browserslist files or referencing the browserslist key inside package.json.\nThis is useful for projects that use a browserslist config for files that won't be compiled with Babel.\n\nIf a string is specified, it must represent the path of a browserslist configuration file. Relative paths are resolved relative to the configuration file which specifies\nthis option, or to `cwd` when it's passed as part of the programmatic options.\n\nDefault: `true`",
          "type": "boolean"
        },
        "browserslistEnv": {
          "description": "The Browserslist environment to use.\n\nDefault: `undefined`",
          "type": "string"
        },
        "caller": {
          "$ref": "#/definitions/TransformCaller",
          "description": "Utilities may pass a caller object to identify themselves to Babel and\npass capability-related flags for use by configs, presets and plugins."
        },
        "cloneInputAst": {
          "description": "By default `babel.transformFromAst` will clone the input AST to aFunction mutations.\nSpecifying `cloneInputAst: false` can improve parsing performance if the input AST is not used elsewhere.\n\nDefault: `true`",
          "type": "boolean"
        },
        "code": {
          "description": "Enable code generation\n\nDefault: `true`",
          "type": "boolean"
        },
        "comments": {
          "description": "Output comments in generated output\n\nDefault: `true`",
          "type": "boolean"
        },
        "compact": {
          "description": "Do not include superfluous whitespace characters and line terminators. When set to `\"auto\"` compact is set to `true` on input sizes of >500KB\n\nDefault: `\"auto\"`",
          "enum": ["auto", false, true]
        },
        "configFile": {
          "description": "The config file to load Babel's config from. Defaults to searching for \"babel.config.js\" inside the \"root\" folder. `false` will disable searching for config files.\n\nDefault: `undefined`",
          "type": ["string", "boolean"]
        },
        "cwd": {
          "description": "The working directory that Babel's programmatic options are loaded relative to.\n\nDefault: `\".\"`",
          "type": "string"
        },
        "env": {
          "additionalProperties": {
            "$ref": "#/definitions/TransformOptions"
          },
          "description": "This is an object of keys that represent different environments. For example, you may have: `{ env: { production: { \\/* specific options *\\/ } } }`\nwhich will use those options when the `envName` is `production`\n\nDefault: `{}`",
          "type": "object"
        },
        "envName": {
          "description": "Defaults to environment variable `BABEL_ENV` if set, or else `NODE_ENV` if set, or else it defaults to `\"development\"`\n\nDefault: env vars",
          "type": "string"
        },
        "exclude": {
          "anyOf": [
            {
              "$ref": "#/definitions/RegExp"
            },
            {
              "additionalProperties": false,
              "type": "object"
            },
            {
              "items": {
                "$ref": "#/definitions/MatchPattern"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "If any of patterns match, the current configuration object is considered inactive and is ignored during config processing."
        },
        "extends": {
          "description": "A path to a `.babelrc` file to extend\n\nDefault: `null`",
          "type": "string"
        },
        "filename": {
          "description": "Filename for use in errors etc\n\nDefault: `\"unknown\"`",
          "type": "string"
        },
        "filenameRelative": {
          "description": "Filename relative to `sourceRoot`\n\nDefault: `(filename)`",
          "type": "string"
        },
        "generatorOpts": {
          "$ref": "#/definitions/GeneratorOptions",
          "description": "An object containing the options to be passed down to the babel code generator, @babel/generator\n\nDefault: `{}`"
        },
        "getModuleId": {
          "additionalProperties": false,
          "description": "Specify a custom callback to generate a module id with. Called as `getModuleId(moduleName)`. If falsy value is returned then the generated module id is used\n\nDefault: `null`",
          "type": "object"
        },
        "highlightCode": {
          "description": "ANSI highlight syntax error code frames\n\nDefault: `true`",
          "type": "boolean"
        },
        "ignore": {
          "description": "Opposite to the `only` option. `ignore` is disregarded if `only` is specified\n\nDefault: `null`",
          "items": {
            "$ref": "#/definitions/MatchPattern"
          },
          "type": "array"
        },
        "include": {
          "anyOf": [
            {
              "$ref": "#/definitions/RegExp"
            },
            {
              "additionalProperties": false,
              "type": "object"
            },
            {
              "items": {
                "$ref": "#/definitions/MatchPattern"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "This option is a synonym for \"test\""
        },
        "inputSourceMap": {
          "$ref": "#/definitions/InputSourceMap",
          "description": "A source map object that the output source map will be based on\n\nDefault: `null`"
        },
        "minified": {
          "description": "Should the output be minified (not printing last semicolons in blocks, printing literal string values instead of escaped ones, stripping `()` from `new` when safe)\n\nDefault: `false`",
          "type": "boolean"
        },
        "moduleId": {
          "description": "Specify a custom name for module ids\n\nDefault: `null`",
          "type": "string"
        },
        "moduleIds": {
          "description": "If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for `common` modules)\n\nDefault: `false`",
          "type": "boolean"
        },
        "moduleRoot": {
          "description": "Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions\n\nDefault: `(sourceRoot)`",
          "type": "string"
        },
        "only": {
          "description": "A glob, regex, or mixed array of both, matching paths to **only** compile. Can also be an array of arrays containing paths to explicitly match. When attempting to compile\na non-matching file it's returned verbatim\n\nDefault: `null`",
          "items": {
            "$ref": "#/definitions/MatchPattern"
          },
          "type": "array"
        },
        "overrides": {
          "description": "Allows users to provide an array of options that will be merged into the current configuration one at a time.\nThis feature is best used alongside the \"test\"/\"include\"/\"exclude\" options to provide conditions for which an override should apply",
          "items": {
            "$ref": "#/definitions/TransformOptions"
          },
          "type": "array"
        },
        "parserOpts": {
          "$ref": "#/definitions/ParserOptions",
          "description": "An object containing the options to be passed down to the babel parser, @babel/parser\n\nDefault: `{}`"
        },
        "plugins": {
          "description": "List of plugins to load and use\n\nDefault: `[]`",
          "items": {
            "$ref": "#/definitions/PluginItem"
          },
          "type": "array"
        },
        "presets": {
          "description": "List of presets (a set of plugins) to load and use\n\nDefault: `[]`",
          "items": {
            "$ref": "#/definitions/PluginItem"
          },
          "type": "array"
        },
        "retainLines": {
          "description": "Retain line numbers. This will lead to wacky code but is handy for scenarios where you can't use source maps. (**NOTE**: This will not retain the columns)\n\nDefault: `false`",
          "type": "boolean"
        },
        "root": {
          "description": "Specify the \"root\" folder that defines the location to search for \"babel.config.js\", and the default folder to allow `.babelrc` files inside of.\n\nDefault: `\".\"`",
          "type": "string"
        },
        "rootMode": {
          "description": "This option, combined with the \"root\" value, defines how Babel chooses its project root.\nThe different modes define different ways that Babel can process the \"root\" value to get\nthe final project root.",
          "enum": ["root", "upward", "upward-optional"],
          "type": "string"
        },
        "shouldPrintComment": {
          "additionalProperties": false,
          "description": "An optional callback that controls whether a comment should be output or not. Called as `shouldPrintComment(commentContents)`. **NOTE**: This overrides the `comment` option when used\n\nDefault: `null`",
          "type": "object"
        },
        "sourceFileName": {
          "description": "Set `sources[0]` on returned source map\n\nDefault: `(filenameRelative)`",
          "type": "string"
        },
        "sourceMaps": {
          "description": "If truthy, adds a `map` property to returned output. If set to `\"inline\"`, a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to `\"both\"`\nthen a `map` property is returned as well as a source map comment appended. **This does not emit sourcemap files by itself!**\n\nDefault: `false`",
          "enum": ["both", false, "inline", true]
        },
        "sourceRoot": {
          "description": "The root from which all sources are relative\n\nDefault: `(moduleRoot)`",
          "type": "string"
        },
        "sourceType": {
          "description": "Indicate the mode the code should be parsed in. Can be one of \"script\", \"module\", or \"unambiguous\". `\"unambiguous\"` will make Babel attempt to guess, based on the presence of ES6\n`import` or `export` statements. Files with ES6 `import`s and `export`s are considered `\"module\"` and are otherwise `\"script\"`.\n\nDefault: `(\"module\")`",
          "enum": ["module", "script", "unambiguous"],
          "type": "string"
        },
        "targets": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "additionalProperties": false,
              "properties": {
                "android": {
                  "type": "string"
                },
                "browsers": {
                  "anyOf": [
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "chrome": {
                  "type": "string"
                },
                "deno": {
                  "type": "string"
                },
                "edge": {
                  "type": "string"
                },
                "electron": {
                  "type": "string"
                },
                "esmodules": {
                  "type": "boolean"
                },
                "firefox": {
                  "type": "string"
                },
                "ie": {
                  "type": "string"
                },
                "ios": {
                  "type": "string"
                },
                "node": {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "patternProperties": {
                        "^[0-9]+$": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "enum": ["current", true]
                    }
                  ]
                },
                "opera": {
                  "type": "string"
                },
                "rhino": {
                  "type": "string"
                },
                "safari": {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "patternProperties": {
                        "^[0-9]+$": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "const": "tp",
                      "type": "string"
                    }
                  ]
                },
                "samsung": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "Describes the environments you support/target for your project.\nThis can either be a [browserslist-compatible](https://github.com/ai/browserslist) query (with [caveats](https://babeljs.io/docs/en/babel-preset-env#ineffective-browserslist-queries))\n\nDefault: `{}`"
        },
        "test": {
          "anyOf": [
            {
              "$ref": "#/definitions/RegExp"
            },
            {
              "additionalProperties": false,
              "type": "object"
            },
            {
              "items": {
                "$ref": "#/definitions/MatchPattern"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "If all patterns fail to match, the current configuration object is considered inactive and is ignored during config processing."
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "$schema": {
      "description": "This is for the schema version of the config file.",
      "type": "string"
    },
    "drawable": {
      "$ref": "#/definitions/GenerateDrawableConfig"
    },
    "pdf": {
      "$ref": "#/definitions/GeneratePDFConfig"
    },
    "react": {
      "$ref": "#/definitions/GenerateReactConfig"
    },
    "svg": {
      "$ref": "#/definitions/GenerateSVGConfig"
    }
  },
  "type": "object"
}
